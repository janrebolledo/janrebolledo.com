---
import { contentfulClient } from "../../lib/contentful";
import { BLOCKS, INLINES } from "@contentful/rich-text-types";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import type { Project } from "../../lib/contentful";
import Layout from "../../Layout/Layout.astro";
import List from "../../components/List.astro";
import Media from "../../components/Media.astro";
import Lock from "../../components/Icons/Lock.astro";

export async function getStaticPaths() {
  const options = {
    renderNode: {
      [BLOCKS.EMBEDDED_ASSET]: (node) =>
        node.data.target.fields.file.contentType.includes("image")
          ? `<div class="px-3 lg:p-6"><img class="rounded-xl" src="https:${node.data.target.fields.file.url}" alt="${node.data.target.fields.title}" /></div>`
          : `<div class="px-3 lg:p-6"><video class="rounded-xl" muted loop playsinline><source src="${node.data.target.fields.file.url}"></video></div>`,
      [BLOCKS.EMBEDDED_ENTRY]: (node) =>
        node.data.target.sys.contentType.sys.id === "embed"
          ? `<div class="embed px-3 lg:p-6 w-full [&_*]:aspect-video [&_*]:h-auto [&_*]:rounded-xl [&_*]:w-full">${node.data.target.fields.embedCode}</div>`
          : node.data.target.sys.contentType.sys.id === "grid"
          ? `<div class='grid grid-section gap-5 container mx-auto px-3 lg:px-24 [&_*]:px-0' style='grid-template-columns: repeat(${
              node.data.target.fields.numberOfColumns
            }, minmax(0, 1fr));'>${node.data.target.fields.cards
              .map(
                (card) =>
                  `<div>${documentToHtmlString(card.fields.content)}</div>`
              )
              .join("")}</div>`
          : "",
      [BLOCKS.UL_LIST]: (node, next) =>
        `<ul class="ul">${next(node.content)}</ul>`,
    },
  };
  const { items } = await contentfulClient.getEntries<Project>({
    content_type: "project",
    include: 3,
  });
  const pages = items.map((item) => ({
    params: { slug: item.fields.slug },
    props: {
      title: item.fields.title,
      date: new Date(item.fields.date).toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      }),
      description: item.fields.description,
      media: item.fields.media,
      thumbnail: item.fields.thumbnail,
      content: documentToHtmlString(item.fields.content, options as any),
      technologies: item.fields.technologies,
      scope: item.fields.scope,
      link: item.fields.link,
      order: item.fields.order,
      type: item.fields.type,
    },
  }));
  return pages;
}

const { items } = await contentfulClient.getEntries<Project>({
  content_type: "project",
});

const {
  title,
  date,
  description,
  media,
  thumbnail,
  content,
  technologies,
  scope,
  link,
  order,
  type,
} = Astro.props;

const projects = items.sort((a, b) => a.fields.order - b.fields.order);

const recommendedProjects = [
  order === 1 ? projects[projects.length - 1] : projects[order - 2],
  order === projects.length ? projects[0] : projects[order],
];
---

<Layout props={Astro.props}>
  <main class="flex flex-col gap-24">
    {
      media && (
        <div class="h-[60vh] lg:h-[80vh] w-full relative z-0" id="project-hero">
          <Media media={media} thumbnail={thumbnail} partiallyRounded />
          <div class="absolute top-0 left-0 right-0 bottom-0 flex items-end">
            <hgroup class="text-white relative w-full">
              <div class="container p-3 mx-auto md:p-24 relative z-[15]">
                <p class="">{type}</p>
                <h1 class="text-4xl md:text-8xl font-bold drop-shadow-lg">
                  {title}
                </h1>
              </div>
              <div class="absolute top-0 right-0 bottom-0 left-0 progressive-blur-wrapper rounded-2xl overflow-y-hidden">
                <div />
                <div />
                <div />
                <div />
                <div />
                <div />
              </div>
            </hgroup>
          </div>
        </div>
      )
    }
    <div
      class="grid md:grid-cols-4 xl:grid-cols-5 gap-5 container mx-auto px-3 md:px-24"
    >
      <div class="md:col-span-3 xl:col-span-3">
        <h3 class="mb-6 md:mb-14 font-bold">Overview</h3><p>{description}</p>
      </div>
      <div class="md:col-span-1 xl:col-span-2">
        <h3 class="mb-6 md:mb-14 font-bold">Details</h3>
        <dl class="flex flex-col gap-7 text-xs">
          {
            link && (
              <>
                <dt class="font-bold">In Production</dt>
                <dd>
                  <a
                    href={link}
                    class="cursor-pointer flex flex-row items-center text-base font-semibold gap-3"
                  >
                    <img src="/icons/link.svg" class="w-4 h-4" alt="" />
                    {link}
                  </a>
                </dd>
                <hr class="w-full border-black" />
              </>
            )
          }
          <dt class="font-bold">Technologies</dt>
          <dd>
            <ul class="flex flex-row flex-wrap gap-1">
              <List list={technologies} />
            </ul>
          </dd>
          <hr class="w-full border-black" />
          <dt class="font-bold">Scope</dt>
          <dd>
            <ul class="flex flex-row flex-wrap gap-1">
              <List list={scope} />
            </ul>
          </dd>
          <hr class="w-full border-black" />
          <dt class="font-bold">Date</dt>
          <dd><time>{date}</time></dd>
        </dl>
      </div>
    </div>

    <article
      set:html={content}
      class="prose prose-neutral max-w-none prose-headings:container prose-headings:px-3 prose-headings:lg:px-24 prose-p:container prose-p:mx-auto prose-p:px-3 lg:prose-p:px-24 prose-headings:mx-auto prose-blockquote:text-4xl prose-blockquote:font-bold prose-blockquote:not-italic quoteless prose-blockquote:text-center prose-blockquote:p-0 prose-blockquote:border-none"
      id="content"
    />

    <section class="container px-3 md:px-24 mx-auto">
      <h2 class="text-xl mb-4">
        View <span class="font-serif italic">More</span>
      </h2>
      <div class="grid gap-5 lg:grid-cols-2">
        {
          recommendedProjects.map((project) => (
            <a
              href={
                project.fields.available
                  ? `/project/${project.fields.slug}/`
                  : null
              }
              class={
                project.fields.available
                  ? "relative"
                  : "relative cursor-not-allowed"
              }
            >
              <div class="absolute top-0 left-0 right-0 bottom-0 p-4 xl:p-12 text-white flex flex-col justify-end bg-gradient-to-t from-black rounded-xl z-10">
                <p>
                  {new Date(project.fields.date).toLocaleDateString("en-US", {
                    year: "numeric",
                  })}
                </p>
                <h4 class="font-bold text-lg flex items-center gap-1">
                  {project.fields.title}{" "}
                  {!project.fields.available && <Lock className="w-5" />}
                </h4>
              </div>
              <Media
                media={project.fields.media}
                thumbnail={project.fields.thumbnail}
              />
            </a>
          ))
        }
      </div>
    </section>
  </main>

  <script data-astro-rerun is:inline>
    const videosArray = document.getElementsByTagName("video");
    const videos = [...videosArray];

    const options = {
      threshold: 0.5,
    };

    const observer = new IntersectionObserver((entries, observer) => {
      entries.forEach((entry) => {
        const video = entry.target;
        if (entry.isIntersecting) {
          video.play();
        } else {
          video.pause();
        }
      });
    }, options);

    videos.forEach((video) => {
      observer.observe(video);
    });
  </script>

  <script data-astro-rerun is:inline>
    const projectHero = document.getElementById("project-hero");

    const observerMain = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.intersectionRatio >= 0.1) {
            header.classList.add("alt");
          } else {
            header.classList.remove("alt");
          }
        });
      },
      {
        threshold: [0, 0.1], // 0 and 10% visibility
      }
    );

    observerMain.observe(projectHero);
  </script>

  <style is:global>
    .ul:has(img, video) {
      @apply px-3 lg:px-6 flex gap-5 list-none flex-wrap lg:flex-nowrap;
    }

    .ul li,
    .ul img,
    .ul video,
    .ul div {
      @apply m-0 p-0;
    }
    .quoteless blockquote {
      quotes: none !important;
    }

    .alt[data-nav-open="false"],
    .alt[data-nav-open=""] {
      background-color: transparent;
      backdrop-filter: none;
      color: white;
    }

    .progressive-blur-wrapper > div {
      height: 100%;
      position: absolute;
      inset: 0;
    }

    .progressive-blur-wrapper:before {
      position: absolute;
      inset: 0;
      content: "";
      z-index: 1;
      backdrop-filter: blur(0.5px);
      -webkit-backdrop-filter: blur(0.5px);
      mask: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 0%,
        rgb(0, 0, 0) 12.5%,
        rgb(0, 0, 0) 25%,
        rgba(0, 0, 0, 0) 37.5%
      );
    }

    .progressive-blur-wrapper > div:nth-of-type(1) {
      z-index: 2;
      backdrop-filter: blur(1px);
      -webkit-backdrop-filter: blur(1px);
      mask: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 12.5%,
        rgb(0, 0, 0) 25%,
        rgb(0, 0, 0) 37.5%,
        rgba(0, 0, 0, 0) 50%
      );
    }

    .progressive-blur-wrapper > div:nth-of-type(2) {
      z-index: 3;
      backdrop-filter: blur(2px);
      -webkit-backdrop-filter: blur(2px);
      mask: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 25%,
        rgb(0, 0, 0) 37.5%,
        rgb(0, 0, 0) 50%,
        rgba(0, 0, 0, 0) 62.5%
      );
    }

    .progressive-blur-wrapper > div:nth-of-type(3) {
      z-index: 4;
      backdrop-filter: blur(4px);
      -webkit-backdrop-filter: blur(4px);
      mask: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 37.5%,
        rgb(0, 0, 0) 50%,
        rgb(0, 0, 0) 62.5%,
        rgba(0, 0, 0, 0) 75%
      );
    }

    .progressive-blur-wrapper > div:nth-of-type(4) {
      z-index: 5;
      backdrop-filter: blur(8px);
      -webkit-backdrop-filter: blur(8px);
      mask: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 50%,
        rgb(0, 0, 0) 62.5%,
        rgb(0, 0, 0) 75%,
        rgba(0, 0, 0, 0) 87.5%
      );
    }

    .progressive-blur-wrapper > div:nth-of-type(5) {
      z-index: 6;
      backdrop-filter: blur(16px);
      -webkit-backdrop-filter: blur(16px);
      mask: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 62.5%,
        rgb(0, 0, 0) 75%,
        rgb(0, 0, 0) 87.5%,
        rgba(0, 0, 0, 0) 100%
      );
    }

    .progressive-blur-wrapper > div:nth-of-type(6) {
      z-index: 7;
      backdrop-filter: blur(32px);
      -webkit-backdrop-filter: blur(32px);
      mask: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 75%,
        rgb(0, 0, 0) 87.5%,
        rgb(0, 0, 0) 100%
      );
    }

    .progressive-blur-wrapper:after {
      position: absolute;
      inset: 0;
      content: "";
      z-index: 8;
      backdrop-filter: blur(64px);
      -webkit-backdrop-filter: blur(64px);
      mask: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 87.5%,
        rgb(0, 0, 0) 100%
      );
    }

    .rounded-b-2xl {
      border-bottom-right-radius: 1rem;
      border-bottom-left-radius: 1rem;
    }

    @media (max-width: 767px) {
      .grid-section {
        grid-template-columns: repeat(1, minmax(0, 1fr)) !important;
      }
    }
  </style>
</Layout>
